// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

        field Array stringArray;
        field int currentLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
    
        if (maxLength < 0) {
            do Sys.error(14);
        }

        if (maxLength > 0) {
            let stringArray = Array.new(maxLength);
        } else {
            let stringArray = null; // support for 0 length strings as per specification
        }
        
        let currentLength = 0;

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return currentLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j < currentLength) {
            return stringArray[j];
        } else {
            do Sys.error(15);
            return 0;
        }
       
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j < currentLength){
            let stringArray[j] = c;
        } else {
            do Sys.error(16);
        }      

        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {

        let stringArray[currentLength] = c;
        let currentLength = currentLength + 1;

        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {

        if (currentLength = 0) {
            do Sys.error(18);
        }

        let currentLength = currentLength - 1;

        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, d, v;
        var boolean neg;

        // test for negative sign, assuming it is the first char in string
        if (charAt(0) = 45) {
            let neg = true;
            let i = 1;
        } else {
            let neg = false;
            let i = 0;
        }

        let v = 0;

        while (i < currentLength) {
            let d = charAt(i) - 48;
            let v = (v * 10) + d;
            let i = i + 1;
        }

        // Apply negative sign if required
        if (neg) {
            let v = -v;
        }

        return v;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {

        // Erase current string contents
        let currentLength = 0;

        // Check if val is negative - if so, append negative sign first and then convert to absolute number
        if (val < 0) {
            do appendChar(45);
            let val = Math.abs(val);
        }

        // Call appendInt
        do appendInt(val);

        return;
    }

    // Internal method used by setInt
    method void appendInt(int val) {
        var int lastDigit;

        let lastDigit = val - (10 * (val/10));    // This is equivalent to i % 10, using an implicit floor function in the division
        
        // If there are digits remaining (i > 10) then call this recursively
        if (val > 10) {
            do appendInt(val/10);
        }

        // Print the current char (putting this after the recursive call prints in the correct order)
        // Add 48 to any int to obtain its ASCII code
        do appendChar(lastDigit + 48);

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
