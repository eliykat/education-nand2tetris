// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        do Util.init(); // Used to get a bitmask for bitwise operations
        do Screen.setColor(true);   // Default to black on start
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int destWord, destBit, currentVal;

        let destWord = 16384 + (y * 32) + (x / 16);
        let destBit = x - (16 * (x/16));    // Equivalent to x mod 16

        let currentVal = Memory.peek(destWord);

        if (color) {
            // Black - bitwise OR operation
            do Memory.poke(destWord, currentVal | Util.bitmask(destBit) );
        } else {
            // White - bitwise XOR operation - imitated by NOT > OR > NOT
            do Memory.poke(destWord, ~((~currentVal) | Util.bitmask(destBit)) );
        } 
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int oX, oY;     // Offset coordinates from x1 and y1
        var int endX, endY; // End position

        // Check for vertical line - note that straight line drawing could be optimised by drawing per word rather than per pixel where possible
        if (x1 = x2) {
            let oY = Math.min(y1, y2);
            let endY = Math.max(y1, y2);

            while (oY < endY) {
                do Screen.drawPixel(x1, oY);
                let oY = oY + 1;
            }

            return;
        }

        // Check for horizontal line
        if (y1 = y2) {
            let oX = Math.min(x1, x2);
            let endX = Math.max(x1, x2);

            while (oX < endX) {
                do Screen.drawPixel(oX, y1);
                let oX = oX + 1;
            }

            return;
        }

        // Diagonal line
        return;

    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        // Draws a rectangle by drawing consecutive lines all the way down the screen

        while (y1 < y2) {
            do Screen.drawLine(x1, y1, x2, y1);
            let y1 = y1 + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        return;
    }
}
