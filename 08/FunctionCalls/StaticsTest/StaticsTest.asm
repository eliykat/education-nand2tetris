// INITIALIZE VM
@256
D=A
@SP
M=D
// CALL FUNCTION Sys.init
// Push constant Sys.init0.return to stack
@Sys.init0.return
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(Sys.init0.return)
// TERMINATE PROGRAM (sys.init should do this, but just in case)
(END)
@END
0;JMP
// ----------------------------------------------------
// COMMENCE FILE: Class1
// ----------------------------------------------------
// DECLARING FUNCTION Class1.set
(Class1.set)
// Push value to stack from argument[0]
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// Pop value from stack to static[0]
@Class1.0
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// Push value to stack from argument[1]
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// Pop value from stack to static[1]
@Class1.1
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// Push constant 0 to stack
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// RETURN FROM FUNCTION Class1.set
@LCL
D=M
@FRAME0
M=D
@5
A=D-A
D=M
@RET0
M=D
// Pop value from stack to argument[0]
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@FRAME0
A=M-1
D=M
@THAT
M=D
@FRAME0
A=M-1
A=A-1
D=M
@THIS
M=D
@FRAME0
A=M-1
A=A-1
A=A-1
D=M
@ARG
M=D
@FRAME0
A=M-1
A=A-1
A=A-1
A=A-1
D=M
@LCL
M=D
@RET0
A=M
0;JMP
// DECLARING FUNCTION Class1.get
(Class1.get)
// Push value to stack from static[0]
@Class1.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// Push value to stack from static[1]
@Class1.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// Subtract
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
M=D
// RETURN FROM FUNCTION Class1.get
@LCL
D=M
@FRAME1
M=D
@5
A=D-A
D=M
@RET1
M=D
// Pop value from stack to argument[0]
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@FRAME1
A=M-1
D=M
@THAT
M=D
@FRAME1
A=M-1
A=A-1
D=M
@THIS
M=D
@FRAME1
A=M-1
A=A-1
A=A-1
D=M
@ARG
M=D
@FRAME1
A=M-1
A=A-1
A=A-1
A=A-1
D=M
@LCL
M=D
@RET1
A=M
0;JMP
// ----------------------------------------------------
// COMMENCE FILE: Class2
// ----------------------------------------------------
// DECLARING FUNCTION Class2.set
(Class2.set)
// Push value to stack from argument[0]
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// Pop value from stack to static[0]
@Class2.0
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// Push value to stack from argument[1]
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// Pop value from stack to static[1]
@Class2.1
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// Push constant 0 to stack
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// RETURN FROM FUNCTION Class2.set
@LCL
D=M
@FRAME1
M=D
@5
A=D-A
D=M
@RET1
M=D
// Pop value from stack to argument[0]
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@FRAME1
A=M-1
D=M
@THAT
M=D
@FRAME1
A=M-1
A=A-1
D=M
@THIS
M=D
@FRAME1
A=M-1
A=A-1
A=A-1
D=M
@ARG
M=D
@FRAME1
A=M-1
A=A-1
A=A-1
A=A-1
D=M
@LCL
M=D
@RET1
A=M
0;JMP
// DECLARING FUNCTION Class2.get
(Class2.get)
// Push value to stack from static[0]
@Class2.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// Push value to stack from static[1]
@Class2.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// Subtract
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
M=D
// RETURN FROM FUNCTION Class2.get
@LCL
D=M
@FRAME2
M=D
@5
A=D-A
D=M
@RET2
M=D
// Pop value from stack to argument[0]
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@FRAME2
A=M-1
D=M
@THAT
M=D
@FRAME2
A=M-1
A=A-1
D=M
@THIS
M=D
@FRAME2
A=M-1
A=A-1
A=A-1
D=M
@ARG
M=D
@FRAME2
A=M-1
A=A-1
A=A-1
A=A-1
D=M
@LCL
M=D
@RET2
A=M
0;JMP
// ----------------------------------------------------
// COMMENCE FILE: Sys
// ----------------------------------------------------
// DECLARING FUNCTION Sys.init
(Sys.init)
// Push constant 6 to stack
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// Push constant 8 to stack
@8
D=A
@SP
A=M
M=D
@SP
M=M+1
// CALL FUNCTION Class1.set
// Push constant Class1.set2.return to stack
@Class1.set2.return
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class1.set
0;JMP
(Class1.set2.return)
// Pop value from stack to temp[0]
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// Push constant 23 to stack
@23
D=A
@SP
A=M
M=D
@SP
M=M+1
// Push constant 15 to stack
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// CALL FUNCTION Class2.set
// Push constant Class2.set2.return to stack
@Class2.set2.return
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class2.set
0;JMP
(Class2.set2.return)
// Pop value from stack to temp[0]
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// CALL FUNCTION Class1.get
// Push constant Class1.get2.return to stack
@Class1.get2.return
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class1.get
0;JMP
(Class1.get2.return)
// CALL FUNCTION Class2.get
// Push constant Class2.get2.return to stack
@Class2.get2.return
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class2.get
0;JMP
(Class2.get2.return)
(Sys.Sys.init_WHILE)
@Sys.Sys.init_WHILE
0;JMP
